{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","forHtml","TextForm","useState","text","setText","style","color","heading","backgroundColor","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","splitArray","split","i","length","firstChar","charAt","slice","updatedTextString","Alert","alert","message","defaultProps","aboutText","App","setMode","setAlert","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b33fbcbe.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { a } from 'react-router-dom';\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n                        </li>\n                        \n                    </ul>\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}` }>\n                        <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\n                        <label className=\"form-check-label\" forHtml=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n                    </div>\n                    \n                </div>\n\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: 'Set title here',\n    aboutText: 'About'\n};","import React, { useState } from 'react'\n\n\nexport default function TextForm(props) {\n    const handleUpClick = () => {\n        // console.log(\"Uppercase was clicked: \" +  text);\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Text is converted to Uppercase\",\"success\");\n    }\n    const handleLoClick = () => {\n        // console.log(\"Uppercase was clicked: \" +  text);\n        let newText = text.toLowerCase();\n        setText(newText);\n        props.showAlert(\"Text is converted to Lowercase\",\"success\");\n    }\n\n    const handleOnChange = (event) => {\n        // console.log(\"On change\");\n        setText(event.target.value)\n    }\n    const handleCapitalCase = (event) => {\n        const initText = text;\n        const splitArray = initText.split(' ');\n        for (let i = 0; i < splitArray.length; i++) {\n            let firstChar = splitArray[i].charAt(0).toUpperCase();\n            splitArray[i] = firstChar + splitArray[i].slice(1);\n        }\n        let updatedTextString = \"\";\n        for (let i = 0; i < splitArray.length; i++) {\n            if (i !== splitArray.length - 1) {\n                updatedTextString += splitArray[i] + \" \";\n            } else {\n                updatedTextString += splitArray[i];\n            }\n\n        }\n        setText(updatedTextString);\n        props.showAlert(\"Text is Capitalized\",\"success\");\n    }\n    const [text, setText] = useState('');\n    // text = \"new text\"; // Wrong way to change the state\n    // setText(\"new text\"); // Correct way to change the state\n    const darkModeStyle = {\n        color: 'white',\n        backgroundColor: 'grey'\n    };\n    const lightModeStyle = {\n        color: 'black',\n        backgroundColor: 'white'\n    };\n    return (\n        <>\n            <div className=\"container\" style={{ color: props.mode === 'light' ? 'grey' : 'white' }}>\n                <h1 >{props.heading}</h1>\n                <div className=\"mb-3\">\n                    <textarea className=\"form-control\" style={props.mode === 'light' ? lightModeStyle : darkModeStyle} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\n                </div>\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\n                <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\n                <button className=\"btn btn-primary mx-1\" onClick={handleCapitalCase}>Convert to Capital Case</button>\n            </div>\n            <div className=\"container my-3\" style={{ color: props.mode === 'light' ? 'grey' : 'white' }}>\n                <h2>Your text summary</h2>\n                <p>{text.length>0?text.split(\" \").length:0} words and {text.length} characters</p>\n                <p>{0.008 * text.split(\" \").length} Minutes read</p>\n                <h2>Preview</h2>\n                <p>{text.length > 0 ? text : 'Enter some text to preview.'}</p>\n            </div>\n        </>\n    )\n}\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert &&\r\n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{props.alert.type}</strong>: {props.alert.message}\r\n        </div>\r\n\r\n    )\r\n}\r\n","import './App.css';\nimport { useState } from 'react';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000)\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n      showAlert('Dark mode has been enabled', 'success');\n      document.title = \"Dark Mode\";\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode has been enabled', 'success');\n      document.title = \"Light Mode\";\n    }\n  }\n  return (\n    <>\n\n      \n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert}></Alert>\n        <div className=\"container my-3\">\n        <TextForm mode={mode} heading=\"Enter the text to analyze below\" showAlert={showAlert} />\n\n        \n        </div>\n      \n\n    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}